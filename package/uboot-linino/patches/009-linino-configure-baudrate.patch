--- a/cpu/mips/ar7240/hornet_serial.c
+++ b/cpu/mips/ar7240/hornet_serial.c
@@ -1,8 +1,14 @@
+
+#include <asm/u-boot.h> /* boot information for Linux kernel */
+#include <asm/global_data.h>	/* global data used for startup functions */
+
 #include <asm/addrspace.h>
 #include <asm/types.h>
 #include <config.h>
 #include <hornet_soc.h>
 
+DECLARE_GLOBAL_DATA_PTR;
+
 #define uart_reg_read(x)        ar7240_reg_rd( (AR7240_UART_BASE+x) )
 #define uart_reg_write(x, y)    ar7240_reg_wr( (AR7240_UART_BASE+x), y)
 
@@ -121,7 +127,7 @@ int serial_init(void)
     u32 baudRateDivisor, clock_step;
     u32 fcEnable = 0; 
     u32 ahb_freq, ddr_freq, cpu_freq;
-    u32 baud = 250000;
+    u32 baud = CONFIG_BAUDRATE;
 
     ar7240_sys_frequency(&cpu_freq, &ddr_freq, &ahb_freq);    
 
@@ -138,6 +144,12 @@ int serial_init(void)
     
     /* Get reference clock rate, then set baud rate to 115200 */
     
+
+#ifdef UART_BAUDRATE_COMP_MEGA32U4
+
+    serial_setbrg();
+
+#else
 #ifndef CONFIG_HORNET_EMU
 
     rdata = ar7240_reg_rd(HORNET_BOOTSTRAP_STATUS);
@@ -153,23 +165,9 @@ int serial_init(void)
  
     clock_step = 8192;
 
-#ifdef UART_BAUDRATE_COMP_MEGA32U4
-        /* Fix timing issues on Atmega32U4 w/16Mhz oscillator */
-        if (baud == 115200) {
-                baudRateDivisor = 0x000C;
-                clock_step  = 0x2000;
-        }
-        if (baud == 250000 || baud == 230400) {
-                baudRateDivisor = 0x0017;
-                clock_step  = 0x7AE0;
-        }
-        if (baud == 500000) {
-                baudRateDivisor = 0x000B;
-                clock_step  = 0x7AE0;
-        }
-#endif
-	rdata = UARTCLOCK_UARTCLOCKSCALE_SET(baudRateDivisor) | UARTCLOCK_UARTCLOCKSTEP_SET(clock_step);
+    rdata = UARTCLOCK_UARTCLOCKSCALE_SET(baudRateDivisor) | UARTCLOCK_UARTCLOCKSTEP_SET(clock_step);
 	uart_reg_write(UARTCLOCK_ADDRESS, rdata);    
+#endif
     
     /* Config Uart Controller */
 #if 1 /* No interrupt */
@@ -224,6 +222,30 @@ void serial_putc(u8 byte)
 
 void serial_setbrg (void)
 {
+	 u32 rdata;
+	 u32 baudRateDivisor, clock_step;
+	 u32 baud = gd->baudrate /*CONFIG_BAUDRATE*/;
+
+	 //printf("%s: %d, %d", __FUNCTION__, baud, gd->baudrate);
+#ifdef UART_BAUDRATE_COMP_MEGA32U4
+        /* Fix timing issues on Atmega32U4 w/16Mhz oscillator */
+        if (baud == 115200) {
+                baudRateDivisor = 0x000C;
+                clock_step  = 0x2000;
+        }
+        if (baud == 250000 || baud == 230400) {
+                baudRateDivisor = 0x0017;
+                clock_step  = 0x7AE0;
+        }
+        if (baud == 500000) {
+                baudRateDivisor = 0x000B;
+                clock_step  = 0x7AE0;
+        }
+#endif
+	rdata = UARTCLOCK_UARTCLOCKSCALE_SET(baudRateDivisor) | UARTCLOCK_UARTCLOCKSTEP_SET(clock_step);
+	uart_reg_write(UARTCLOCK_ADDRESS, rdata);
+
+
 }
 
 void serial_puts (const char *s)
--- a/include/configs/ar7240.h
+++ b/include/configs/ar7240.h
@@ -10,7 +10,7 @@
 #define CONFIG_BOOTDELAY	4	/* autoboot after 4 seconds	*/
 
 #define CONFIG_BAUDRATE		115200 
-#define CFG_BAUDRATE_TABLE  { 	115200}
+#define CFG_BAUDRATE_TABLE  { 	115200, 250000}
 
 #define	CONFIG_TIMESTAMP		/* Print image info with timestamp */
 
--- a/board/ar7240/ap121/ap121.c
+++ b/board/ar7240/ap121/ap121.c
@@ -62,6 +62,13 @@ ar7240_usb_otp_config(void)
     }
 }
 
+void linino_enable_UART(void)
+{
+    ar7240_reg_wr(AR7240_GPIO_FUNC, (ar7240_reg_rd(AR7240_GPIO_FUNC) & 0xFBFFFFFF));
+    ar7240_reg_wr(AR7240_GPIO_OE, (ar7240_reg_rd(AR7240_GPIO_OE)|0x600000));
+    ar7240_reg_wr(AR7240_GPIO_OUT, (ar7240_reg_rd(AR7240_GPIO_OUT)|0x600000));
+ }
+
 void ar7240_gpio_config(void)
 {
     /* Disable clock obs 
@@ -81,23 +88,17 @@ void ar7240_gpio_config(void)
     /* Set HORNET_BOOTSTRAP_STATUS BIT18 to ensure that software can control GPIO26 and GPIO27 */
     //ar7240_reg_wr (HORNET_BOOTSTRAP_STATUS, (ar7240_reg_rd(HORNET_BOOTSTRAP_STATUS) | (0x1<<18)));
 
-    //Linino enable UART
     linino_enable_UART();
 }
 
-void linino_enable_UART(void)
-{
-    ar7240_reg_wr(AR7240_GPIO_FUNC, (ar7240_reg_rd(AR7240_GPIO_FUNC) & 0xFBFFFFFF));
-    ar7240_reg_wr(AR7240_GPIO_OE, (ar7240_reg_rd(AR7240_GPIO_OE)|0x600000));
-    ar7240_reg_wr(AR7240_GPIO_OUT, (ar7240_reg_rd(AR7240_GPIO_OUT)|0x600000));
- }
-
 int
 ar7240_mem_config(void)
 {
+#ifndef CONFIG_LININO_DDR2
 #ifndef COMPRESSED_UBOOT
     unsigned int tap_val1, tap_val2;
 #endif
+#endif
 /*
 #ifdef CONFIG_HORNET_EMU
     ar7240_ddr_initial_config_for_fpga();
@@ -115,6 +116,7 @@ ar7240_mem_config(void)
 
     ar7240_gpio_config();
 
+#ifndef CONFIG_LININO_DDR2
 #ifndef COMPRESSED_UBOOT
 #ifndef CONFIG_HORNET_EMU
     ar7240_ddr_tap_init();
@@ -124,6 +126,7 @@ ar7240_mem_config(void)
     printf("#### TAP VALUE 1 = %x, 2 = %x\n",tap_val1, tap_val2);
 #endif
 #endif
+#endif
 
     //ar7240_usb_initial_config();
     ar7240_usb_otp_config();
@@ -151,7 +154,11 @@ int checkboard (char *board_string)
 #else
 int checkboard (void)
 {
+#if (BOARD_STRING == WAPI)
+	printf("Linino Board (ar9331) U-boot\n");
+#else
     printf("AP121-2MB (ar9330) U-boot\n");
+#endif
     return 0;
 }
 #endif /* #ifdef COMPRESSED_UBOOT */
--- a/cpu/mips/ar7240/meminit.c
+++ b/cpu/mips/ar7240/meminit.c
@@ -56,7 +56,8 @@
 #ifdef COMPRESSED_UBOOT
 #	define prmsg(...)
 #else
-#	define prmsg	printf
+//#	define prmsg	printf
+#	define prmsg(...)
 #endif
 
 uint8_t     tap_settings[] = 
--- a/include/configs/ap121.h
+++ b/include/configs/ap121.h
@@ -331,6 +331,8 @@
 #define DEBUG
 #define CFG_HUSH_PARSER
 #define CFG_PROMPT_HUSH_PS2 "hush>"
+#undef CFG_PROMPT
+#define CFG_PROMPT 	"linino> "
 
 /*
 ** Parameters defining the location of the calibration/initialization
@@ -358,7 +360,6 @@
 /* For Kite, only PCI-e interface is valid */
 #define AR7240_ART_PCICFG_OFFSET        3
 
-#define CONFIG_BOOTDELAY	    	3	
 #define CONFIG_BOOT_RETRY_TIME		-1
 #define CONFIG_AUTOBOOT_KEYED
 #define CONFIG_AUTOBOOT_PROMPT		"autoboot in %d seconds (stop with 'lin')...\n"
