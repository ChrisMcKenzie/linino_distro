#
# lininoio.sh : A simple LininoIO enabler/disabler script
#
# Copyright (C) 2014 Dog Hunter AG  
# 
# Author : Arturo Rinaldi
# E-mail : arturo@doghunter.org 
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# v5.3 : added support for chowchow board

#!/bin/sh

# Check for ssh connection

sshcheck () {

	if [ ! `ps | grep -i [d]ropbear | wc -l` -ge 2 ]
	then 
		echo ""
		echo "Please connect to your board by means of ssh before running this script ! Terminating..."
		echo ""
		
		exit 0
	else
		echo ""
		echo "WARNING ! Please be sure to run lininoio when connected by means of SSH to your board, otherwise you could damage your board !"
		echo ""
		
		read -p "Do you want to proceed ? [y/n] " yn_ssh
		
		case $yn_ssh in
			[Yy]*)
				clear
				;;
			[Nn]*)
				
				echo ""
				echo "Terminating the script for now..."
				echo""
				
				exit 0
				;;
		esac
	fi

}

# Shows script help and status

bootargs_stop () {
	
	fw_setenv bootargs 'console=ttyATH0,250000 board=linino-'$boardname' mtdparts=spi0.0:256k(u-boot)ro,64k(u-boot-env),14656k(rootfs),1280k(kernel),64k(nvram),64k(art),15936k@0x50000(firmware) mem=64M rootfstype=squashfs,jffs2 noinitrd'

}

bootargs_start () {

	fw_setenv bootargs 'console=spicons board=linino-'$boardname' mtdparts=spi0.0:256k(u-boot)ro,64k(u-boot-env),14656k(rootfs),1280k(kernel),64k(nvram),64k(art),15936k@0x50000(firmware) mem=64M rootfstype=squashfs,jffs2 noinitrd'

}

statusio () {

	if [ `ls /etc/rc.d | grep "S11mcuio"` ]
	then
		echo ""
		echo "STATUS : ENABLED"
	else
		echo ""
		echo "STATUS : DISABLED"
	fi

}

help () {

	if [ "$1" = '-v' ] && [ -e /etc/linino_version ]
	then
		cat /etc/linino_version | sed -e /RELEASE/d | sed -e /CODENAME/d | sed -e /TARGET/d
			
		exit 0
	fi 
	
	statusio

	echo ""
	echo "USAGE : lininoio <-v> / <-f> <start/stop>"
	echo ""
	echo -e "Use the '-f' argument to force anyway the start/stop procedure\nUse just '-v' argument to print out the release version details"
	echo ""
	
}

# Asks for rebooting after the LininoIO modifications have been made

reboot_io () {

	if [ $1 = 'start' ]
	then
	
		word='enable'
		
	elif [ $1 = 'stop' ]
	then
	
		word='disable'
		
 	fi

	t=1
	
	while [ $t != 0 ]
	do
		
		echo ""
		read -p "To fully "$word" the LininoIO features you must reboot your system. Reboot now ? [y/n] " yn1
		echo ""
		
		case $yn1 in
			[Yy]*)
				
				echo ""
				echo "Rebooting..."
				echo ""
				
				reboot && exit	
				
				t=0
				
				;;
				
			[Nn]*)
		
				echo ""
				echo "Terminating for now, remember to reboot your system later..."
				echo ""
		
				exit 0
				
				t=0
		
				;;
				
			*) 
				
				echo ""
				echo "You have to make a choice !"
				echo ""
				
				sleep 1
				
				clear
				
				;;
		esac
		
	done
}

# Detects if "mcuio" service is up and running or not

mcuio_ok () {

	if [ `ls /etc/rc.d | grep "S11mcuio"` ] && `cat /etc/inittab | grep -qs SPI0`
	then
	
		echo ""
		echo "LininoIO is currently up and running or you simply have to reboot your board to enable it !"
		echo ""
		
		exit 0
		
	fi	
	
}

mcuio_ko () {

	if [ ! `ls /etc/rc.d | grep "S11mcuio"` ] && `cat /etc/inittab | grep -qs ATH0`
	then
	
		echo ""
		echo "LininoIO is currently disabled....nothing to revert ! You maybe need to reboot your board now...."
		echo ""
		
		exit 0
		
	fi	
	
}

# Detects if the board is supported or not

boardname=$(awk '/machine/ {print tolower($4)}' /proc/cpuinfo)

if [ $boardname ]
then

	case $boardname in
			'yun')
					FILE="YunSerialTerminal.hex"
				;;
						
			'one')
					FILE="LininoOneSerialTerminal.hex"
				;;
			'chowchow')
					FILE="ChowChowSerialTerminal.hex"
				;;
					
			*)
			
				echo ""
				echo "You board is not supported ! Terminating the script..."
				echo ""
			
				exit 0
			
				;;
	esac
		
else

	echo ""
	echo "Board not detected ! ! !"
	echo ""
	
	exit 0
	
fi

#Main

force=$1

if [ $1=='-f' ] && [ $2!='-v' ]
then 

	shift 1

fi

if [ -e /etc/linino/bathos-$boardname.hex ]
then

	case $1 in
			'start')
				
				case $force in
					'-f')
						;;
					*)
						mcuio_ok
						;;
				esac
				
				# Detects active SSH connection

				sshcheck
				
				p=1
	
				while [ $p != 0 ]
				do
					
					echo ""
					read -p "Do you want to enable the LininoIO OS features ? [y/n] " yn
					echo ""
	
					case $yn in
						[Yy]*)
						
							bootargs_start
			
							sed -i s/ttyATH0\:\:askfirst/ttySPI0\:\:respawn/g /etc/inittab
							run-avrdude /etc/linino/bathos-$boardname.hex
							/etc/init.d/mcuio enable
							
							# echo "Rebooting..."
							# reboot && exit
							
							reboot_io $1
			
							p=0
			
							;;
			
						[Nn]*)
				
							echo ""
							echo "Terminating the script..."
							echo ""
				
							exit 0
			
							p=0
			
							;;
						*) 
			
							echo ""
							echo "You have to make a choice !"
							echo ""
			
							;;
					esac	
				done
					
				;;

			'stop')
			
				case $force in
					'-f')
						;;
					*)
						mcuio_ko
						;;
				esac
				
				# Detects active SSH connection

				sshcheck
				
				q=1
	
				while [ $q != 0 ]
				do
					
					echo ""
					read -p "Do you want to disable the LininoIO OS features ? [y/n] " yn
					echo ""
					
					case $yn in
						[Yy]*)
			
							bootargs_stop
			
							sed -i s/ttySPI0\:\:respawn/ttyATH0\:\:askfirst/g /etc/inittab
							/etc/init.d/mcuio disable
							run-avrdude /etc/linino/$FILE
							
							# echo "Rebooting..."
							# reboot && exit
							
							reboot_io $1
							
							q=0
				
							;;
				
						[Nn]*)
				
							echo ""
							echo "Terminating the script..."
							echo ""
				
							exit 0
			
							q=0
			
							;;
		
						*)
				
							echo ""
							echo "You have to make a choice !"
							echo ""
			
							;;
				
					esac	
				done
			
				;;

			*)
			
				help $1 && exit 0
			
				;;

	esac

fi